# coding: utf-8

# 偶数桁のとき N + rev(N)の外側から順に同じ値を取る.
#     a b c d e f
#   + f e d c b a
#   -------------
#   i j k l m n o
# を考える.
# 真ん中の足し算 cd + dc において, d + c が繰り上がれば, l, m の一方は
# 偶数となる. よって cd + dc は繰り上がらない.
# b + e が繰り上がるとすると, j と o のどちらかは偶数となる.
#

# 1桁 ... a + a の 1 桁目は偶数なので解なし.
# 2桁 ... ab + ba の各桁の和は a + b, b + a よって
#         a + b < 10 かつ, a + b が奇数のとき解となる
#         12, 14, 16, 18, 21, 23, 25, 27, 32, 34, 36, 41, 43, 45, 52, 54, 61,
#         63, 72, 81
#         よって 20 通り.
#         また, 後に使うが, 先頭に 0 を許可した場合は 01, 10, 03, 30, 05, 50,
#         07, 70, 09, 90 が追加され 30 通り.
#         偶数桁のとき, 反転した数を足すと, 回文数となるため, どの桁でも繰り上がらない.
# 3桁 ... abc + cba の各桁の和はそれぞれ, a + c, b + b, c + a であり, b + b は
#         偶数なので c + a > 10 かつ奇数, b + b <= 8 である
#         (a, c) = (2, 9), (3, 8), (4, 9), (4, 7), (5, 8), (5, 6), ..., (8, 9),
#                  (8, 7), (8, 5), (8, 3), (9, 8), (9, 6), (9, 4), (9. 2) の 20 通り.
#         b = 0, 1, 2, 3, 4 の 5 通り.
#         よって 20 * 5 = 100 通り
# 4桁 ... abcd を外側と内側で分け, (a, d) と (b, c) に分ける.
#         (a, d) の選びかたは, 2 桁の解の選びかたと同じであり,
#         (b, c) の選びかたは, 0 を許可する 2 桁の解の選びかたと同じ.
#         よって 20 * 30 = 600 通り.
# 5桁 ... abcde を外側 (a, e), 内側 (b, d), 真ん中(c) に分ける.
#         このとき, c + c は偶数なので, 2 桁目の d + b は繰り上がる必要があるが,
#         4 桁目の b + d も繰り上がり, 5 桁目は a + e + 1, 1 桁目は e + a となり,
#         どちらかが偶数となる. よって解なし
# 6桁 ... abcdef の各桁の和は a + f, b + e, c + d
#         a + f の選びかたは 2 桁の解の選びかた, b + e の選びかたと, c + d の
#         選びかたは 0 を許可する 2 桁の選びかたと同じ.
#         よって 20 * 30 * 30 = 18000
# 7桁 ... abcdefg は (a, g), (b, f), (c, d, e)に分割して考えると,
#         (a, g) の選びかたは 20 通り, (b, f) は 30 通り, (c, d, e) は 100 通り
#         よって 20 * 30 * 100 = 60000


def rev(num):
    n = 0
    while num > 0:
        n = n * 10 + num % 10
        num //= 10
    return n


def head(num):
    while num > 9:
        num //= 10
    return num


def main():
    N = 10**7
    cnt = 0
    for i in range(1000000, N):
        if i % 10 == 0:
            continue
        if i & 1 == head(i) & 1:
            continue

        n = i + rev(i)
        while n > 0:
            if (n % 10) & 1 == 0:
                break
            n //= 10
        else:
            cnt += 1
    return cnt


if __name__ == '__main__':
    print(main())
