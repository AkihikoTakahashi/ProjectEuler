# coding: utf-8

# s(1) = 1
# s(2) = 2
# ...
# s(9) = 9
# s(10) = 19
# s(11) = 29
# ...
# s(19) = 199
# s(20) = 299
# ...
# s(28) = 1999
# s(29) = 2999
# s(30) = 3999
# のように s(n) は最初の桁以外はすべて 9 となる

# S(30) を考える
# 1. 最大桁について考える
# 1999 + 2999 + 3999 =
# 1000 + 2000 + 3000 + 999 * 3 =
# 3(3 + 1) * 10^3 / 2 + (10^3 - 1) * 3
#
# 2. 最大桁以外について考える
# 1 + 2 + ... + 9 + 19 + 29 + ... + 99 + 199 + ... + 999
# 1桁目の和 = (45 + 81 * 2) * 10^0
# 2桁目の和 = (45 + 81 * 1) * 10^1
# 3桁目の和 = (45 + 81 * 0) * 10^2
# より最大桁以外の和は
# (45 + 81 * 2) * 10^0 + (45 + 81 * 1) * 10^1 + (45 + 81 * 0) * 10^2
# と書ける.
# これは初項 45+81*2 公差 81 の等差数列と 初項 0 公比 10 の等比数列の
# 積となる数列の和である.
#
# S(n) の一般項について考える
# s(n) は (n//9 + 1) 桁で, 最大桁の数は n % 9となる.
# d = n//9, r = n % 9 とする.
#
# 最大桁の和は
# 1 * 10^d + 2 * 10^d + ... + r * 10^d = r(r + 1) * 10^d
# と
# 999...99 * r = (10^d - 1) * r
# の和で書ける.
#
# 最大桁以外の和は
# Σ(45 + 81 * i) * 10^(d - 1 - i) (i=0, 1, ..., d-1)
# である. 等差数列 * 等比数列の和を求めると,
# A(n) = - 6 - 9 * d + 6 * 10^d (d = n//9)
# と求まる.


def gen_fibo(n):
    a, b = 0, 1
    for _ in range(n):
        yield a + b
        a, b = a + b, a


def S(n, MOD=1000000007):
    d = n // 9
    r = n % 9

    # 最大桁の和 199...9 + 299...9 + ... + r99...9 を求める
    s = (r * (r + 1) * pow(10, d, MOD) //
         2) % MOD  # 1*10^d + 2*10^d + ... + r*10^d
    s = (s + (pow(10, d, MOD) - 1) * r) % MOD  # (10^d - 1)*r

    # 最大桁以外の和
    # 1 + 2 + .. + 9 + 19 + 29 + ... + 99 + 199 + 299 + ... + 999 + ...
    # を求める
    s = (s + 6 * pow(10, d, MOD) - 9 * d - 6) % MOD  # 最大桁以外の和

    return s


def main():
    MOD = 1000000007
    N = 90
    s = 0
    fibo = gen_fibo(N)

    # 不要な項を捨てる
    _ = next(fibo)

    for i in fibo:
        s = (s + S(i)) % MOD
    return s


if __name__ == '__main__':
    print(main())
